#!/usr/bin/env bash

_thisdir="$(dirname $0)"
test "${_thisdir}" = "." && _thisdir=${PWD}
_ifwroot="${_thisdir}"/qt-ifw
_date=$(date +'%Y%m%d')
_dateqif=$(date +'%Y-%m-%d')
_version=${_date}
_filename=msys2-x86_64-${_date}.exe
_filename2=msys2-base-x86_64-${_date}.tar.xz
_filename3=msys2-base-x86_64-${_date}.sfx.exe
_archivegen=/mingw64/bin/archivegen.exe
_binarycreator=/mingw64/bin/binarycreator.exe
_installerbase=/mingw64/bin/installerbase.exe
_newmsysbase=/tmp/newmsys
_newmsys=${_newmsysbase}/msys64

declare -a undo_commands

_exitcode=5

exit_with_undo() {
  for _cmd in ${undo_commands[@]}; do
    eval "${_cmd}"
  done
  exit ${_exitcode}
}

exit_cleanly() {
  _exitcode=$1; shift;
  local _message=$1; shift;
  echo "${_message}"
  exit_with_undo
}

do_seds() {
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" \) -exec sed -i "s|@DATE@|${_dateqif}|g" "{}" \;
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" \) -exec sed -i "s|@VERSION@|${_version}|g" "{}" \;
  undo_commands+=("undo_seds")
}

undo_seds() {
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" \) -exec sed -i "s|<ReleaseDate>${_dateqif}<|<ReleaseDate>@DATE@<|g" "{}" \;
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" \) -exec sed -i "s|<Version>${_version}<|<Version>@VERSION@<|g" "{}" \;
}

create_installer_archive() {
  local _data="${_ifwroot}"/packages/com.msys2.root.base/data
  [ -d "${_data}" ] && rm -rf "${_data}"
  mkdir -p "${_data}"

  local _dirs="${_newmsys}/"*
  local _compress_cmd="${_archivegen} --compression 9 ${_data}/msys64.7z ${_dirs}"
  pushd / > /dev/null
    echo "Run: ${_compress_cmd} ..."
    eval "${_compress_cmd}" 2>&1
    _result=$?
    if [ "${_result}" -eq "0" ]; then
          echo " archivegen succeeded. Created ${_data}/msys64.7z"
    else
          exit_cleanly "3" "archivegen failed."
    fi
  popd > /dev/null
}

create_sfx() {
  pushd ${_newmsysbase} > /dev/null
    export XZ_OPT="-e9T0"
    local _compress_cmd2="/usr/bin/tar --transform='s/:/_/g' --dereference --hard-dereference -cJf ${_thisdir}/${_filename2} msys64"
    echo "Run: ${_compress_cmd2} ..."
    eval "${_compress_cmd2}"
    _result=$?
    if [ "${_result}" -eq "0" ]; then
          echo " tar succeeded. Created "
    else
          die "MSYS2 compressing fail."
    fi

    # self extracting cli 7z archive
    "${_thisdir}/create-sfx.sh" "msys64" "${_thisdir}/${_filename3}"
  popd > /dev/null
}

# Add -v to get more information.
make_installer() {
  "${_binarycreator}" \
    -t "${_installerbase}" \
    -p "${_ifwroot}/packages" \
    -c "${_ifwroot}/config/config.xml" \
    --offline-only \
    "${_filename}" \
    -v
}

trap exit_with_undo 1 2 15

create_chroot_system() {
  [ -d ${_newmsysbase} ] && rm -rf ${_newmsysbase}
  mkdir -p "${_newmsys}"
  pushd "${_newmsys}" > /dev/null

    mkdir -p var/lib/pacman
    mkdir -p var/log
    mkdir -p tmp

    pacman -Syu --root "${_newmsys}"
    pacman -S filesystem msys2-runtime --noconfirm --root "${_newmsys}"
    pacman -S base --noconfirm --root "${_newmsys}"
    _result=$?
    if [ "${_result}" -ne "0" ]; then
      exit_cleanly "1" "failed to create newmsys2 via command 'pacman -S base --noconfirm --root ${_newmsys}'"
    fi
  popd > /dev/null
}

if [ ! -f "${_archivegen}" ]; then
  pacman -S --noconfirm mingw64/mingw-w64-x86_64-qt-installer-framework
fi

if [ ! -f "${_archivegen}" ]; then
  exit_cleanly "2" "installation of qt installer framework failed."
fi

echo "Creating MSYS2 chroot system ${_newmsys}"
create_chroot_system

echo "Creating MSYS2 installer /tmp/${_filename}"
if [ -f /tmp/${_filename} ]; then
  rm -f /tmp/${_filename}
fi

do_seds
create_installer_archive
create_sfx
make_installer
exit_cleanly "0" "All done, see ${_filename}"
